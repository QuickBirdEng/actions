#!/bin/bash

for arg in "$@"; do
  case $arg in
    --module=*)
      module="${arg#*=}"
      ;;
    --project-path=*)
      project_path="${arg#*=}"
      ;;
    --reports-path=*)
      reports_path="${arg#*=}"
      ;;
    *)
      echo "Unknown argument: $arg"
      usage
      ;;
  esac
done

cd $project_path/$module

yarn install

if [ $module == "." ]; then
  module="root"
fi

output_file="${reports_path}/yarn-report_${module}.csv"

echo "Library,Module,Current Version,Latest/Fix Version,Severity,Details" > $output_file

vulnerabilities=$(yarn audit --groups dependencies --json)

declare -A packages

tmp_file="tmp_yarn.csv"
touch $tmp_file

result=$(echo "$vulnerabilities" | jq -r '.data.resolution.path, .data.advisory.module_name, .data.advisory.severity, .data.advisory.patched_versions, .data.advisory.findings[0].version, .data.advisory.url')

while IFS= read -r package_name; do
    read -r module
    read -r severity
    read -r patched_versions
    read -r version
    read -r vulnerability_url

    package_name=$(echo "$package_name" | jq -R 'split(">")[0]')
    if [[ "$package_name" == "\"null\"" || "$package_name" == "null" ]]; then
      continue
    fi

    packages[$package_name]=1

    echo "$package_name, $module, $version, $patched_versions, $severity, $vulnerability_url" >> $tmp_file

done <<< "$result"

awk '!seen[$0]++' $tmp_file | sort -t, -k1,1 -k2,2 >> $output_file

truncate -s 0 $tmp_file

outdated=`yarn outdated --json | jq 'select(.type == "table") | .data.body |
  reduce .[] as $item (
    {};
    # Check if Package Type is not "devDependencies"
    if $item[4] != "devDependencies" then
      . + {($item[0]): {
        "current": $item[1],
        "wanted": $item[2],
        "latest": $item[3],
        "url": $item[5]
      }}
    else
      . # Ignore the item if it has "devDependencies"
    end
  )'`

for package in $(echo "$outdated" | jq -r 'keys[]'); do
  current=$(echo "$outdated" | jq -r ".[\"$package\"].current")
  latest=$(echo "$outdated" | jq -r ".[\"$package\"].latest")

  echo "$package,,$current,$latest" >> $tmp_file
done

cat $tmp_file | sort -t, -k1,1 >> $output_file
rm $tmp_file
