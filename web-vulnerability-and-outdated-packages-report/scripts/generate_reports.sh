#!/bin/bash

usage() {
  echo "Usage: $0 --project-path <path> --reports-path --modules <module1,module2,module3>"
  exit 1
}

declare -a modules

for arg in "$@"; do
  case $arg in
    --project-path=*)
      project_path="${arg#*=}"
      ;;
    --reports-path=*)
      reports_path="${arg#*=}"
      ;;
    --modules=*)
      modules_string="${arg#*=}"
      IFS=',' read -r -a modules <<< "$modules_string"
      ;;
    *)
      echo "Unknown argument: $arg"
      usage
      ;;
  esac
done

if [ -z "$project_path" ]; then
  echo "Error: --project-path is mandatory."
  usage
fi

if [ ${#modules[@]} -eq 0 ]; then
  echo "Error: --modules is mandatory."
  usage
fi

GREEN='\033[0;32m'
CYAN='\033[0;36m'
NC='\033[0m'

printf "${CYAN}Project path: $project_path\n"
printf "${CYAN}Reports path: $reports_path\n"
printf "${CYAN}Modules: $modules_string \n"

mkdir -p $reports_path

printf "${GREEN}Processing module: root...\n"

bash generate-npm-report.sh --module="." --project-path="$project_path" --reports-path="$reports_path"
bash generate-yarn-report.sh --module="." --project-path="$project_path" --reports-path="$reports_path"

for module in "${modules[@]}"; do
  printf "${GREEN}Processing module: $module...\n"

  bash generate-npm-report.sh --module="$module" --project-path="$project_path" --reports-path="$reports_path"
  bash generate-yarn-report.sh --module="$module" --project-path="$project_path" --reports-path="$reports_path"
done

cd $reports_path
pwd
ls -ahl $reports_path
