name: 'Build Flutter Artifact'
description: 'Building IPA, APK or App Bundle for flutter applications'
inputs:
  build-number:
    description: 'Build number'
    required: true
  use-cache:
    description: 'Use cached version of packages (to speed up the build)'
    required: false
    default: false
  clean:
    description: 'Should perform a `flutter clean` first?'
    required: false
    default: false
  build-type:
    description: 'ipa, apk or appbundle'
    required: true
  build-arguments:
    description: 'any extra arguments such as using sksl or passing a variable using --dart-define etc.'
    required: false
  extra-step:
    description: ''
  obfuscate:
    description: 'Should obfuscate the build?'
    required: false
    default: false
  working-directory:
    description: 'Working directory for action'
    default: '.'
outputs:
  artifact-path:
    description: 'The path to the artifact (ipa, apk or appbundle) created by this action'
    value: ${{ steps.build-artifact.outputs.artifact-path }}
  artifact-dart-symbols-file-path:
    description: 'The path to the dart symbols file'
    value: ${{ steps.build-artifact.outputs.dart-symbols-path }}
runs:
  using: "composite"
  steps:
    - uses: QuickBirdEng/actions/setup-flutter@main
      with:
        use-cache: ${{ inputs.use-cache }}
        clean: ${{ inputs.clean }}
        setup-gems: ${{ inputs.build-type == 'ipa' }}
        working-directory: ${{ inputs.working-directory }}
    - id: build-artifact
      name: "Building Artifact"
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        extra_arguments_list=()

        version_and_build_number=""
        symbols_directory="app_symbols"

        if [[ ${{inputs.obfuscate}} == 'true' ]]; then
          extra_arguments_list+=("--obfuscate --split-debug-info=$symbols_directory")
        fi

        # Get tag if it exists (to get version number from it)
        if [[ $GITHUB_REF_TYPE == 'tag' ]]; then
          version=$(echo $GITHUB_REF_NAME | grep --only-matching --extended-regexp '([0-9]+).([0-9]+).([0-9]+)' | head -1)
          echo "Using Version number from tag => $version"
          extra_arguments_list+=("--build-name=$version")
          version_and_build_number="$version+${{ inputs.build-number }}"
        else
          version_and_build_number="$(grep '^version:' pubspec.yaml | sed 's/version: //' | sed 's/+.*//')+${{ inputs.build-number }}"
        fi

        extra_arguments="${extra_arguments_list[*]}"

        echo "Extra Arguments: $extra_arguments"
        echo "Version & Build: $version_and_build_number"

        # 2. Build flutter with build number and version number
        flutter build ${{ inputs.build-type }} --build-number=${{ inputs.build-number }} $extra_arguments ${{ inputs.build-arguments }} | tee flutter_build.log

        # 3. search for word that ends with certain strings and then remove the ending . if any and convert to relative path if needed
        artifact_path=$(cat flutter_build.log | awk '{for (word=1;word<=NF;word++) if ($word~/release.apk|release.aab|.xcarchive|.ipa/) print $word}' | sed 's/\.$//')

        echo "dart-symbols-path=${{ inputs.working-directory }}/$symbols_directory" >> $GITHUB_OUTPUT

        case $artifact_path in
          /*) echo "artifact-path=$artifact_path" >> $GITHUB_OUTPUT ;;
          *) echo "artifact-path=${{ inputs.working-directory }}/$(echo $artifact_path)" >> $GITHUB_OUTPUT ;;
        esac
