#!/bin/bash

usage() {
  echo "Usage: $0 --project-path <path> --reports-path <reports-path>"
  exit 1
}

for arg in "$@"; do
  case $arg in
    --project-path=*)
      project_path="${arg#*=}"
      ;;
    --reports-path=*)
      reports_path="${arg#*=}"
      ;;
    *)
      echo "Unknown argument: $arg"
      usage
      ;;
  esac
done

mkdir -p $reports_path
cd $project_path

output_file="${reports_path}/flutter-report.csv"
echo "Library,Type,Current Version,Latest/Fixed Version,Kind,Severity, Detail" > $output_file

result=$(osv-scanner scan --json .)

echo "$result" | jq -r '.results[].packages[] |
  .package as $pkg |
  .vulnerabilities[] |
  {
    package_name: $pkg.name,
    version: $pkg.version,
    ecosystem: $pkg.ecosystem,
    vulnerability_id: .id,
    vulnerability_aliases: (.aliases | join(";")),
    severity_score: (.severity[0].score),
    fixed_version: (.affected[].ranges[].events[] | select(.fixed) | .fixed // "Not Fixed")
  } |
  "\(.package_name),\(.ecosystem),\(.version),\(.fixed_version),,\(.severity_score),\(.vulnerability_id)"' >> $output_file


result=$(flutter pub outdated --json | jq '.packages | map({(.package): del(.package)}) | add')

for package in $(echo "$result" | jq -r 'keys[]'); do
  package_json=$(echo "$result" | jq -r ".[\"$package\"]")

  kind=$(echo "$package_json" | jq -r '.kind')
  is_discontinued=$(echo "$package_json" | jq -r '.isDiscontinued')
  current_version=$(echo "$package_json" | jq -r '.current.version')
  latest_version=$(echo "$package_json" | jq -r '.latest.version')

  # [[ $kind == "direct" ]] && is_direct="Yes" || is_direct="No"

  echo "$package,Flutter,$current_version,$latest_version,$kind" >> $output_file
done


# Gems
result=$(gem outdated)

while IFS= read -r line; do
  package_name=$(echo "$line" | awk -F' ' '{print $1}')
  current_version=$(echo "$line" | sed -n 's/.*(\([^<]*\)<.*/\1/p')
  latest_version=$(echo "$line" | sed -n 's/.*< *\([^)]*\).*/\1/p')

  echo "$package_name,Gem,$current_version,$latest_version" >> $output_file
done <<< "$result"

result=$(pod outdated)

echo "$result" | grep -E "^- " | while read -r line; do
  package_name=$(echo "$line" | awk '{print $2}')
  current_version=$(echo "$line" | sed -n 's/.* \([0-9\.]*\) ->.*/\1/p')
  upgradable_version=$(echo "$line" | sed -n 's/.* -> \([0-9\.]*\) .*/\1/p')
  latest_version=$(echo "$line" | sed -n 's/.*latest version \([0-9\.]*\).*/\1/p')

  echo "$package_name,Pod,$current_version,$latest_version" >> $output_file
done
