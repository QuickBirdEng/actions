ECOSYSTEM=$1
PACKAGE_NAME=$2
VERSION=$3

strip_prerelease() {
  echo "$1" | cut -d'-' -f1
}

VERSION_STRIPPED=$(strip_prerelease "$VERSION")

IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_STRIPPED"

if [[ "$MAJOR" -eq 0 ]]; then
  RANGE_START="0.${MINOR}.0"
  RANGE_END="0.$((MINOR+1)).0"
else
  RANGE_START="${MAJOR}.0.0"
  RANGE_END="$((MAJOR+1)).0.0"
fi

QUERY_JSON=$(cat <<EOF
{
  "package": {
    "name": "$PACKAGE_NAME",
    "ecosystem": "$ECOSYSTEM"
  },
  "version_range": {
    "events": [
      {"introduced": "$RANGE_START"}
    ]
  }
}
EOF
)

RESPONSE=$(curl -s -X POST "https://api.osv.dev/v1/query" \
  -H "Content-Type: application/json" \
  -d "$QUERY_JSON")

VULNS=$(echo "$RESPONSE" | jq --arg version "$VERSION_STRIPPED" --arg end "$RANGE_END" '
  reduce (.vulns[]
    | {
        id: .id,
        summary: .summary,
        introduced: (.affected[].ranges[].events[] | select(has("introduced")).introduced | split("-")[0]),
        fixed: (.affected[].ranges[].events[] | select(has("fixed")).fixed | split("-")[0])
      }
  ) as $vuln ({}; 
    .[$vuln.id] = {
      summary: $vuln.summary,
      introduced: $vuln.introduced,
      fixed: $vuln.fixed,
      url: ("https://osv.dev/vulnerability/\($vuln.id)"),
      status: (
        if $vuln.fixed == null then
          "Unfixed (still vulnerable)"
        elif $vuln.fixed <= $version then
          "Fixed before or at this version"
        else
          "Fixed after this version"
        end
      )
    }
  )
')

SAFE_VERSION=$(echo "$RESPONSE" | jq -r '
  .vulns[]
  | .affected[].ranges[].events[]
  | select(has("fixed"))
  | .fixed
  | split("-")[0]
' | sort -V | tail -n1)

if [[ -z "$SAFE_VERSION" ]]; then
  SAFE_VERSION=null
else
  SAFE_VERSION="\"$SAFE_VERSION\""
fi

jq -n --arg package "$PACKAGE_NAME" \
      --arg version "$VERSION" \
      --arg version_range_start "$RANGE_START" \
      --arg version_range_end "$RANGE_END" \
      --argjson vulns "$VULNS" \
      --argjson safe_version "$SAFE_VERSION" \
'{
  package: $package,
  checked_version_range: ($version_range_start + " ..< " + $version_range_end),
  vulnerabilities_count: ($vulns | keys | length),
  vulnerabilities: $vulns
} + (if ($vulns | keys | length) > 0 then {earliest_safe_version: $safe_version} else {} end)'
